// Grid system
@use "sass:math";

@mixin make-container($gutter: $grid-gutter-width) {
	margin-left: auto;
	margin-right: auto;
	padding-left: ($gutter * 0.5);
	padding-right: ($gutter * 0.5);
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths) {
	@each $breakpoint, $container-max-width in $max-widths {
		@include media-breakpoint-up($breakpoint) {
			max-width: $container-max-width;
		}
	}
}

@mixin make-row($gutter: $grid-gutter-width) {
	display: flex;
	flex-wrap: wrap;
	margin-left: math.div($gutter, -2);
	margin-right: math.div($gutter, -2);
}

@mixin make-col($gutter: $grid-gutter-width) {
	position: relative;
	min-height: 1px;
	width: 100%;
	padding-left: ($gutter * 0.5);
	padding-right: ($gutter * 0.5);
}

@mixin make-col-span($size, $columns: $grid-columns) {
	flex: 0 0 percentage(math.div($size, $columns));
	max-width: percentage(math.div($size, $columns));
}

@mixin make-col-offset($size, $columns: $grid-columns) {
	@if $need-offset {
		margin-left: percentage(math.div($size, $columns));
	}
}

@mixin make-col-push($size, $columns: $grid-columns) {
	@if $need-push {
		left: if($size > 0, percentage(math.div($size, $columns)), auto);
	}
}

@mixin make-col-pull($size, $columns: $grid-columns) {
	@if $need-pull {
		right: if($size > 0, percentage(math.div($size, $columns)), auto);
	}
}

@mixin make-col-modifier($type, $size, $columns) {
	// Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
	@if $type == push {
		@include make-col-push($size, $columns);
	} @else if $type == pull {
		@include make-col-pull($size, $columns);
	} @else if $type == offset {
		@include make-col-offset($size, $columns);
	}
}

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
	// Common properties for all breakpoints
	%grid-column {
		position: relative;
		// Prevent columns from collapsing when empty
		min-height: 1px;
		padding-left: ($gutter * 0.5);
		padding-right: ($gutter * 0.5);
		> * {
			// Inner gutter via padding
			// margin-left: ($gutter * 0.5);
			// margin-right: ($gutter * 0.5);
		}
	}
	@each $breakpoint in map-keys($breakpoints) {
		@for $i from 1 through $columns {
			.col-#{$breakpoint}-#{$i} {
				@extend %grid-column;
			}
		}

		@include media-breakpoint-up($breakpoint) {
			@for $i from 1 through $columns {
				.col-#{$breakpoint}-#{$i} {
					@include make-col-span($i, $columns);
				}
			}
			@each $modifier in (pull, push, offset) {
				@for $i from 0 through $columns {
					.col-#{$breakpoint}-#{$modifier}-#{$i} {
						@include make-col-modifier($modifier, $i, $columns);
					}
				}
			}
		}
	}
}

// Slider arrow-side
@mixin arrow-width($max-widths: $container-max-widths) {
	@each $breakpoint, $container-max-width in $max-widths {
		@include media-breakpoint-up($breakpoint) {
			width: calc((100% - #{$container-max-width}) / 2);
		}
	}
}
@mixin arrow-side($dir) {
	@if $dir == left {
		left: 0;
		right: auto;
	} @else {
		right: 0;
		left: auto;
	}
}
